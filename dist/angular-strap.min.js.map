{"version":3,"sources":["angular-strap.js","popover/popover.js","helpers/compiler.js","button/button.js","scrollspy/scrollspy.js","navbar/navbar.js","typeahead/typeahead.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","aside/aside.js","dropdown/dropdown.js","datepicker/datepicker.js","collapse/collapse.js","alert/alert.js","affix/affix.js","module.js"],"names":["container","document","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","provider","defaults","activeClass","toggleEvent","data","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","trigger","keyboard","title","content","delay","autoClose","$get","$popover","PopoverFactory","config","$tooltip","restrict","directive","requestAnimationFrame","$window","attr","falseValueRegExp","bsKey","isDefined","charAt","toUpperCase","slice","test","dataTarget","target","$eval","$observe","newValue","oldValue","$sce","trustAsHtml","$watch","bsPopover","$applyPlacement","popover","bsShow","match","bsEnabled","viewport","setViewport","$on","destroy","spies","$document","$rootScope","dimensions","windowEl","debounce","bodyEl","throttle","nodeName","offset","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","id","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","scrollTop","checkPositionWithEventLoop","on","checkOffsets","off","checkPosition","i","isUndefined","prop","docEl","$activateElement","length","offsetTop","setTimeout","activeElement","source","$getTrackedElement","addClass","removeClass","parent","filter","targetElement","querySelector","trackedElement","el","b","top","trackElement","push","toDelete","untrackElement","splice","activate","init","body","scrollspy","childEl","querySelectorAll","child","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","minLength","limit","autoSelect","comparator","trimValue","$typeahead","parentScope","$resetMatches","$$rAF","$timeout","$matches","$$postDigest","$scope","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$render","$emit","prefixEvent","onSelect","$setViewValue","isFunction","equals","$onMouseDown","preventDefault","stopPropagation","clientTop","active","clientBottom","highWatermark","Math","lowWatermark","clientHeight","keyCode","$$updateScrollTop","$digest","show","$element","hide","$onKeyDown","$$phase","$root","TypeaheadFactory","array","$filter","expression","results","postLink","require","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","ngModel","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","animation","placement","titleTemplate","type","mouseDownPreventDefault","mouseDownStopPropagation","selector","padding","TooltipFactory","promise","$bsCompiler","split","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","isTouch","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","left","scroll","outerDims","isBody","documentElement","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$options","$promise","$new","toLowerCase","$id","map","parseFloat","$setEnabled","$hide","setEnabled","isEnabled","compileData","tipContainer","bindTriggerEvents","isElement","focus","onBeforeShow","after","lastChild","display","visibility","clonedElement","prefixClass","version","prepend","$animate","enterAnimateCallback","_blur","onBeforeHide","blur","leave","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","tipPosition","getCalculatedOffset","applyPlacement","query","isNative","tooltip","transclusion","hasOwnProperty","bsTooltip","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","copy","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","_tabsHash","_addTabControl","navClass","$attrs","control","$activeClass","self","$panes","$activePaneChangeListeners","$push","pane","$active","$navClass","$remove","activeIndex","indexOf","$setActive","name","fn","$pane","$onKeyPress","e","$isActive","$index","$tab","transclude","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","attrs","bsActivePane","parsedBsActivePane","assign","$parse","render","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","$apply","isArray","$getIndex","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","tagName","dataMultiple","inputEl","addEventListener","join","$isEmpty","backdrop","size","zIndex","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","backdropBaseZindex","$show","bottom","destroyModalElement","z-index","defaultPrevented","customClass","minor","backdropAnimation","bindBackdropEvents","which","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","isActive","checked","toggleClass","bind","hasClass","v","AsideFactory","$aside","bsAside","aside","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$views","$mode","$toggleMode","$setToday","$clear","setMode","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","$activeIndexes","bsCollapseCtrl","actionEventHandler","bsCollapseToggle","$registerTarget","action","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          $tooltip.$element.on('mouseenter', function () {\n            clearTimeout(timeout);\n            $tooltip.$element.on('mouseleave', $tooltip.leave);\n          });\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n              $tooltip.$element.off('mouseenter');\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          $tooltip.$element.on('mouseenter', function () {\n            clearTimeout(timeout);\n            $tooltip.$element.on('mouseleave', $tooltip.leave);\n          });\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n              $tooltip.$element.off('mouseenter');\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}